"""Add sap_txn_id unique column to Transaction table

Revision ID: 7d66f37f129b
Revises: 41a8920581be
Create Date: 2025-05-02 12:13:23.291717
"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '7d66f37f129b'
down_revision = '41a8920581be'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - adjust using batch mode for SQLite ###
    # Use batch_alter_table context manager for SQLite compatibility
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        # 1. add column (nullable=True for existing rows)
        batch_op.add_column(sa.Column('sap_txn_id', sa.String(length=32), nullable=True)) # Still nullable=True

        # 2. add unique constraint
        # Use constraint name within batch op for consistency
        batch_op.create_unique_constraint('uq_transactions_sap_txn_id', ['sap_txn_id'])
        # NOTE: No need for separate index creation, unique constraint implies index

    # Optional: Add backfill logic here if needed using op.execute(...)
    # Be careful with SQL syntax compatibility between SQLite and PostgreSQL if backfilling here

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - adjust using batch mode for SQLite ###
    # Use batch_alter_table context manager for SQLite compatibility
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        # Drop the constraint first
        batch_op.drop_constraint('uq_transactions_sap_txn_id', type_='unique')

        # Then drop the column
        batch_op.drop_column('sap_txn_id')
    # ### end Alembic commands ###


